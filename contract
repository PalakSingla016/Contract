  // SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Contract {
    address public owner;
    uint public balance;

    // Events to log messages
    event Deposit(address indexed depositor, uint amount, string message);
    event Withdrawal(address indexed withdrawer, uint amount, string message);
    event ForceRevert(string message);

    //This function will execute once,when the contract get deployed
    constructor() {
        owner = msg.sender; // Set the contract deployer as the owner
    }

    // Modifier to check if the caller is the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

   
    function depositAmount(uint amount) public payable {
        require(msg.value == amount, "Sent value must match the specified deposit amount");
        require(amount > 0, "Deposit amount must be greater than zero");
        balance += amount;
        emit Deposit(msg.sender, amount, "Deposit successful");
    }

   
    function withdrawAmount(uint amount) public onlyOwner {
        require(amount <= balance, "Insufficient balance");
        
        // Using assert to check for internal invariants
        uint oldBalance = balance;
        balance -= amount;
        assert(balance == oldBalance - amount);

        // Transfer the specified amount to the owner
        (bool success, ) = owner.call{value: amount}("");
        require(success, "Transfer failed");

        emit Withdrawal(msg.sender, amount, "Withdrawal successful");
    }

    /**
      the revert() function will always reverting the transaction here
     */
    function forceRevert() public  {
        emit ForceRevert("This function always reverts");
        revert("This function always reverts");
    }

    // Fallback function to accept Ether
    receive() external payable {
        balance += msg.value;
    }
}
